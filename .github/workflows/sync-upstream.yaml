name: Sync Upstream and Create PR

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  UPSTREAM_REPO_URL: "https://gitlab.com/secsh/pkixssh.git"
  MAIN_BRANCH: "master"

jobs:
  check-and-create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git and add upstream
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote add upstream https://oauth2:${{ secrets.GITLAB_PAT }}@${UPSTREAM_REPO_URL#https://}
        env:
          UPSTREAM_REPO_URL: ${{ env.UPSTREAM_REPO_URL }}

      - name: Check for new tags and existing work
        id: check_tags
        run: |
          echo "Fetching latest tag from upstream..."
          LATEST_UPSTREAM_TAG=$(git ls-remote --tags --sort='v:refname' upstream | tail -n 1 | awk '{print $2}' | sed 's#refs/tags/##')
          
          if [ -z "$LATEST_UPSTREAM_TAG" ]; then
            echo "Could not fetch tags from upstream. Exiting."
            exit 0
          fi
          echo "Latest upstream tag is: $LATEST_UPSTREAM_TAG"

          # 既に同じタグのPR作成用ブランチが存在しないか確認
          EXISTING_BRANCH=$(git ls-remote --heads origin "sync/${LATEST_UPSTREAM_TAG}" | awk '{print $2}')
          if [[ -n "$EXISTING_BRANCH" ]]; then
              echo "A sync branch for tag ${LATEST_UPSTREAM_TAG} already exists. Exiting."
              echo "new_release=false" >> $GITHUB_OUTPUT
              exit 0
          fi
          
          # 既に同じ名前のリリースがGitHubに存在しないか確認
          TAG_EXISTS=$(gh release list --json tagName --jq --arg tag "$LATEST_UPSTREAM_TAG" '.[] | select(.tagName == $tag) | .tagName' || echo "")
          if [[ -n "$TAG_EXISTS" ]]; then
              echo "Release for tag ${LATEST_UPSTREAM_TAG} already exists on GitHub. Exiting."
              echo "new_release=false" >> $GITHUB_OUTPUT
              exit 0
          fi

          echo "New upstream tag ${LATEST_UPSTREAM_TAG} found. Proceeding to create a PR."
          echo "new_release=true" >> $GITHUB_OUTPUT
          echo "tag_name=$LATEST_UPSTREAM_TAG" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: Create Branch, Merge, and Push
        if: steps.check_tags.outputs.new_release == 'true'
        id: create_branch
        run: |
          TAG_NAME=${{ steps.check_tags.outputs.tag_name }}
          BRANCH_NAME="sync/${TAG_NAME}"
          
          git fetch upstream --tags
          git checkout -b $BRANCH_NAME ${{ env.MAIN_BRANCH }}
          git merge $TAG_NAME --no-edit
          git push -u origin $BRANCH_NAME
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.check_tags.outputs.new_release == 'true'
        run: |
          TAG_NAME=${{ steps.check_tags.outputs.tag_name }}
          BRANCH_NAME=${{ steps.create_branch.outputs.branch_name }}
          GITLAB_TAG_URL="${UPSTREAM_REPO_URL%.git}/-/tree/${TAG_NAME}"

          PR_TITLE="Sync: Release ${TAG_NAME} from upstream"
          PR_BODY="This PR syncs the repository with the upstream release.\n\n**Upstream Release Tag:** [${TAG_NAME}](${GITLAB_TAG_URL})\n\n**News:** [Official version ${TAG_NAME#v}](https://roumenpetrov.info/secsh/#news)\n\nPlease review the changes before merging."

          gh pr create \
            --base "${{ env.MAIN_BRANCH }}" \
            --head "$BRANCH_NAME" \
            --title "$PR_TITLE" \
            --body "$PR_BODY"
        env:
          GH_TOKEN: ${{ github.token }}
          UPSTREAM_REPO_URL: ${{ env.UPSTREAM_REPO_URL }}
